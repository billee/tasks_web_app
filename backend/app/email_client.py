# backend/app/email_client.py
import os
import requests
from typing import Dict, Any, Optional
from dotenv import load_dotenv
from pathlib import Path

# Load environment variables from root directory
root_dir = Path(__file__).parent.parent.parent
env_path = root_dir / ".env"
load_dotenv(dotenv_path=str(env_path))

class EmailClient:
    def __init__(self):
        self.resend_api_key = os.getenv("RESEND_API_KEY")
        # Don't raise error if API key is not set, just log a warning
        if not self.resend_api_key:
            print("WARNING: RESEND_API_KEY environment variable not set. Email functionality will be disabled.")
            self.enabled = False
            return
            
        self.enabled = True
        self.base_url = "https://api.resend.com"
        self.headers = {
            "Authorization": f"Bearer {self.resend_api_key}",
            "Content-Type": "application/json"
        }
    
    def send_email(
        self, 
        to_email: str, 
        subject: str, 
        html_content: str,
        from_email: Optional[str] = None,
        from_name: Optional[str] = "AI Assistant"
    ) -> Dict[str, Any]:
        """
        Send an email using Resend API
        """
        # Check if email client is enabled
        if not self.enabled:
            return {
                "success": False,
                "message": "Email service is not configured. Please set RESEND_API_KEY environment variable."
            }
            
        try:
            # Use default from email if not provided
            if not from_email:
                from_email = os.getenv("DEFAULT_FROM_EMAIL", "noreply@yourdomain.com")
            
            # Prepare email data
            email_data = {
                "from": f"{from_name} <{from_email}>",
                "to": [to_email],
                "subject": subject,
                "html": html_content
            }
            
            # Send the email via Resend API
            response = requests.post(
                f"{self.base_url}/emails",
                headers=self.headers,
                json=email_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "success": True,
                    "message": "Email sent successfully",
                    "email_id": result.get("id"),
                    "data": result
                }
            else:
                error_data = response.json() if response.content else {}
                return {
                    "success": False,
                    "message": f"Failed to send email: {error_data.get('message', 'Unknown error')}",
                    "status_code": response.status_code,
                    "error": error_data
                }
                
        except requests.exceptions.RequestException as e:
            return {
                "success": False,
                "message": f"Network error: {str(e)}",
                "error": str(e)
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Unexpected error: {str(e)}",
                "error": str(e)
            }
    
    def validate_email_address(self, email: str) -> bool:
        """
        Basic email validation
        """
        import re
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None
    
    def format_email_html(self, content: str) -> str:
        """
        Convert plain text to basic HTML format
        """
        # Replace line breaks with HTML breaks
        html_content = content.replace('\n', '<br>')
        
        # Basic HTML wrapper
        html_template = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Email from AI Assistant</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px;">
                {html_content}
            </div>
            <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666;">
                <p>This email was generated by your AI Assistant.</p>
            </div>
        </body>
        </html>
        """
        return html_template

# Initialize global email client instance
# This will not raise an error even if RESEND_API_KEY is not set
email_client = EmailClient()